/* The following code was generated by JFlex 1.4.3 on 24/06/25, 9:56 p. m. */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/06/25, 9:56 p. m. from the specification file
 * <tt>C:/Users/Adrian Diosa/Downloads/AnalizadorLexico (1)/AnalizadorLexico/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\17\2\0\1\3\22\0\1\3\7\0\1\40\1\41"+
    "\1\23\1\21\1\3\1\22\1\0\1\16\12\2\1\44\1\4\1\0"+
    "\1\20\3\0\32\1\1\42\1\0\1\43\1\0\1\36\1\0\1\30"+
    "\1\35\1\25\1\34\1\11\1\10\1\1\1\15\1\5\2\1\1\12"+
    "\1\26\1\6\1\24\1\31\1\1\1\27\1\13\1\7\1\33\1\32"+
    "\1\14\2\1\1\37\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\7\2\1\6"+
    "\1\7\1\10\1\11\1\12\7\2\1\13\1\14\1\15"+
    "\1\16\1\17\1\2\1\20\6\2\1\21\3\2\1\4"+
    "\16\2\1\0\2\2\1\22\10\2\1\23\7\2\1\24"+
    "\2\2\1\25\1\26\1\2\1\0\4\2\1\27\1\30"+
    "\10\2\1\31\1\2\1\32\1\2\1\33\1\3\1\2"+
    "\1\34\3\2\1\35\23\2\1\36\11\2\1\37\5\2"+
    "\1\40\4\2\1\41\1\2\1\42\1\43\3\2\1\44"+
    "\1\45\2\2\1\46\14\2\1\47\1\2\1\50\4\2"+
    "\1\51\2\2\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\45\0\271\0\336"+
    "\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\45\0\45"+
    "\0\45\0\45\0\u01e1\0\u0206\0\u022b\0\u0250\0\u0275\0\u029a"+
    "\0\u02bf\0\u02e4\0\45\0\45\0\45\0\45\0\u0309\0\112"+
    "\0\u032e\0\u0353\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431"+
    "\0\u0456\0\u047b\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u0534\0\u0559"+
    "\0\u057e\0\u05a3\0\u05c8\0\u05ed\0\u0612\0\u0637\0\u065c\0\u0681"+
    "\0\u06a6\0\u06cb\0\u06f0\0\u0715\0\u073a\0\u075f\0\u0784\0\u07a9"+
    "\0\u07ce\0\u07f3\0\u0818\0\u083d\0\u0862\0\112\0\u0887\0\u08ac"+
    "\0\u08d1\0\u08f6\0\u091b\0\u0940\0\u0965\0\112\0\u098a\0\u09af"+
    "\0\112\0\112\0\u09d4\0\u09f9\0\u0a1e\0\u0a43\0\u0a68\0\u0a8d"+
    "\0\112\0\112\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21\0\u0b46\0\u0b6b"+
    "\0\u0b90\0\u0bb5\0\112\0\u0bda\0\112\0\u0bff\0\112\0\45"+
    "\0\u0c24\0\112\0\u0c49\0\u0c6e\0\u0c93\0\112\0\u0cb8\0\u0cdd"+
    "\0\u0d02\0\u0d27\0\u0d4c\0\u0d71\0\u0d96\0\u0dbb\0\u0de0\0\u0e05"+
    "\0\u0e2a\0\u0e4f\0\u0e74\0\u0e99\0\u0ebe\0\u0ee3\0\u0f08\0\u0f2d"+
    "\0\u0f52\0\112\0\u0f77\0\u0f9c\0\u0fc1\0\u0fe6\0\u100b\0\u1030"+
    "\0\u1055\0\u107a\0\u109f\0\112\0\u10c4\0\u10e9\0\u110e\0\u1133"+
    "\0\u1158\0\112\0\u117d\0\u11a2\0\u11c7\0\u11ec\0\112\0\u1211"+
    "\0\112\0\112\0\u1236\0\u125b\0\u1280\0\112\0\112\0\u12a5"+
    "\0\u12ca\0\112\0\u12ef\0\u1314\0\u1339\0\u135e\0\u1383\0\u13a8"+
    "\0\u13cd\0\u13f2\0\u1417\0\u143c\0\u1461\0\u1486\0\112\0\u14ab"+
    "\0\112\0\u14d0\0\u14f5\0\u151a\0\u153f\0\112\0\u1564\0\u1589"+
    "\0\112";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\3\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\5\1\17"+
    "\1\20\1\21\1\22\1\3\1\23\1\24\1\25\1\3"+
    "\1\26\1\27\1\3\1\30\1\31\2\3\1\32\1\33"+
    "\1\34\1\35\1\36\46\0\2\3\2\0\11\3\6\0"+
    "\14\3\7\0\1\4\45\0\1\5\13\0\1\5\26\0"+
    "\2\3\2\0\1\3\1\37\1\3\1\40\5\3\6\0"+
    "\14\3\6\0\2\3\2\0\11\3\6\0\3\3\1\41"+
    "\1\42\7\3\6\0\2\3\2\0\1\3\1\43\3\3"+
    "\1\44\1\45\2\3\6\0\14\3\6\0\2\3\2\0"+
    "\4\3\1\46\4\3\6\0\14\3\6\0\2\3\2\0"+
    "\1\47\10\3\6\0\7\3\1\50\4\3\6\0\2\3"+
    "\2\0\10\3\1\51\6\0\14\3\6\0\2\3\2\0"+
    "\11\3\6\0\4\3\1\52\7\3\23\0\1\53\27\0"+
    "\2\3\2\0\11\3\6\0\1\54\3\3\1\55\7\3"+
    "\6\0\2\3\2\0\1\56\10\3\6\0\1\57\6\3"+
    "\1\60\4\3\6\0\2\3\2\0\4\3\1\61\4\3"+
    "\6\0\1\62\3\3\1\63\7\3\6\0\2\3\2\0"+
    "\11\3\6\0\1\64\3\3\1\65\7\3\6\0\2\3"+
    "\2\0\4\3\1\66\4\3\6\0\4\3\1\67\7\3"+
    "\6\0\2\3\2\0\4\3\1\70\4\3\6\0\14\3"+
    "\6\0\2\3\2\0\11\3\6\0\1\71\13\3\27\0"+
    "\1\72\23\0\2\3\2\0\2\3\1\40\6\3\6\0"+
    "\14\3\6\0\2\3\2\0\1\73\10\3\6\0\14\3"+
    "\6\0\2\3\2\0\5\3\1\74\3\3\6\0\14\3"+
    "\6\0\2\3\2\0\2\3\1\75\6\3\6\0\14\3"+
    "\6\0\2\3\2\0\6\3\1\76\2\3\6\0\14\3"+
    "\6\0\2\3\2\0\2\3\1\77\6\3\6\0\14\3"+
    "\6\0\2\3\2\0\4\3\1\100\4\3\6\0\14\3"+
    "\6\0\2\3\2\0\1\3\1\101\7\3\6\0\14\3"+
    "\6\0\2\3\2\0\11\3\6\0\2\3\1\102\11\3"+
    "\6\0\2\3\2\0\1\103\10\3\6\0\14\3\6\0"+
    "\2\3\2\0\11\3\6\0\1\3\1\104\12\3\5\0"+
    "\17\53\1\0\25\53\1\0\2\3\2\0\1\3\1\105"+
    "\7\3\6\0\14\3\6\0\2\3\2\0\11\3\6\0"+
    "\3\3\1\106\10\3\6\0\2\3\2\0\4\3\1\107"+
    "\4\3\6\0\14\3\6\0\2\3\2\0\6\3\1\110"+
    "\2\3\6\0\14\3\6\0\2\3\2\0\5\3\1\111"+
    "\3\3\6\0\14\3\6\0\2\3\2\0\2\3\1\112"+
    "\6\3\6\0\14\3\6\0\2\3\2\0\11\3\6\0"+
    "\2\3\1\113\11\3\6\0\2\3\2\0\1\114\10\3"+
    "\6\0\14\3\6\0\2\3\2\0\2\3\1\115\6\3"+
    "\6\0\14\3\6\0\2\3\2\0\5\3\1\116\3\3"+
    "\6\0\3\3\1\117\10\3\6\0\2\3\2\0\11\3"+
    "\6\0\3\3\1\120\10\3\6\0\2\3\2\0\11\3"+
    "\6\0\3\3\1\121\10\3\6\0\2\3\2\0\11\3"+
    "\6\0\1\3\1\122\12\3\6\0\2\3\2\0\11\3"+
    "\6\0\1\123\13\3\7\0\1\124\43\0\2\3\2\0"+
    "\4\3\1\125\4\3\6\0\14\3\6\0\2\3\2\0"+
    "\6\3\1\126\2\3\6\0\14\3\6\0\2\3\2\0"+
    "\11\3\6\0\1\127\13\3\6\0\2\3\2\0\4\3"+
    "\1\40\4\3\6\0\14\3\6\0\2\3\2\0\11\3"+
    "\6\0\4\3\1\130\7\3\6\0\2\3\2\0\11\3"+
    "\6\0\3\3\1\131\10\3\6\0\2\3\2\0\11\3"+
    "\6\0\1\132\13\3\6\0\2\3\2\0\11\3\6\0"+
    "\4\3\1\133\7\3\6\0\2\3\2\0\5\3\1\76"+
    "\3\3\6\0\14\3\6\0\2\3\2\0\4\3\1\134"+
    "\4\3\6\0\14\3\6\0\2\3\2\0\2\3\1\135"+
    "\6\3\6\0\14\3\6\0\2\3\2\0\1\3\1\136"+
    "\7\3\6\0\14\3\6\0\2\3\2\0\2\3\1\137"+
    "\6\3\6\0\14\3\6\0\2\3\2\0\2\3\1\140"+
    "\6\3\6\0\14\3\6\0\2\3\2\0\11\3\6\0"+
    "\1\141\13\3\6\0\2\3\2\0\11\3\6\0\5\3"+
    "\1\142\6\3\6\0\2\3\2\0\11\3\6\0\13\3"+
    "\1\143\6\0\2\3\2\0\4\3\1\144\4\3\6\0"+
    "\14\3\6\0\2\3\2\0\11\3\6\0\4\3\1\145"+
    "\7\3\6\0\2\3\2\0\11\3\6\0\10\3\1\146"+
    "\3\3\6\0\2\3\2\0\5\3\1\147\3\3\6\0"+
    "\14\3\7\0\1\124\36\0\1\150\4\0\2\3\2\0"+
    "\11\3\6\0\10\3\1\151\3\3\6\0\2\3\2\0"+
    "\11\3\6\0\1\152\13\3\6\0\2\3\2\0\1\3"+
    "\1\153\7\3\6\0\14\3\6\0\2\3\2\0\11\3"+
    "\6\0\10\3\1\154\3\3\6\0\2\3\2\0\2\3"+
    "\1\155\6\3\6\0\14\3\6\0\2\3\2\0\11\3"+
    "\6\0\3\3\1\156\10\3\6\0\2\3\2\0\1\157"+
    "\10\3\6\0\4\3\1\160\7\3\6\0\2\3\2\0"+
    "\2\3\1\161\6\3\6\0\14\3\6\0\2\3\2\0"+
    "\11\3\6\0\3\3\1\162\10\3\6\0\2\3\2\0"+
    "\1\163\10\3\6\0\14\3\6\0\2\3\2\0\11\3"+
    "\6\0\3\3\1\164\10\3\6\0\2\3\2\0\4\3"+
    "\1\165\4\3\6\0\14\3\6\0\2\3\2\0\1\3"+
    "\1\166\7\3\6\0\14\3\6\0\2\3\2\0\11\3"+
    "\6\0\4\3\1\167\7\3\6\0\2\3\2\0\11\3"+
    "\6\0\2\3\1\170\11\3\6\0\2\3\2\0\11\3"+
    "\6\0\1\3\1\171\12\3\6\0\2\3\2\0\1\172"+
    "\10\3\6\0\14\3\6\0\2\3\2\0\11\3\6\0"+
    "\1\173\13\3\6\0\2\3\2\0\1\3\1\174\7\3"+
    "\6\0\14\3\6\0\2\3\2\0\11\3\6\0\3\3"+
    "\1\175\10\3\6\0\2\3\2\0\11\3\6\0\3\3"+
    "\1\176\10\3\6\0\2\3\2\0\11\3\6\0\4\3"+
    "\1\177\7\3\6\0\2\3\2\0\11\3\6\0\5\3"+
    "\1\200\6\3\6\0\2\3\2\0\1\3\1\201\7\3"+
    "\6\0\14\3\6\0\2\3\2\0\11\3\6\0\3\3"+
    "\1\202\10\3\6\0\2\3\2\0\11\3\6\0\1\3"+
    "\1\203\12\3\6\0\2\3\2\0\11\3\6\0\10\3"+
    "\1\204\3\3\6\0\2\3\2\0\11\3\6\0\4\3"+
    "\1\205\7\3\6\0\2\3\2\0\4\3\1\206\4\3"+
    "\6\0\14\3\6\0\2\3\2\0\6\3\1\207\2\3"+
    "\6\0\14\3\6\0\2\3\2\0\11\3\6\0\3\3"+
    "\1\210\10\3\6\0\2\3\2\0\11\3\6\0\7\3"+
    "\1\211\4\3\6\0\2\3\2\0\11\3\6\0\12\3"+
    "\1\212\1\3\6\0\2\3\2\0\11\3\6\0\4\3"+
    "\1\213\7\3\6\0\2\3\2\0\11\3\6\0\3\3"+
    "\1\214\10\3\6\0\2\3\2\0\5\3\1\215\3\3"+
    "\6\0\14\3\6\0\2\3\2\0\11\3\6\0\4\3"+
    "\1\216\7\3\6\0\2\3\2\0\1\217\10\3\6\0"+
    "\14\3\6\0\2\3\2\0\4\3\1\220\4\3\6\0"+
    "\14\3\6\0\2\3\2\0\1\3\1\221\7\3\6\0"+
    "\14\3\6\0\2\3\2\0\6\3\1\222\2\3\6\0"+
    "\14\3\6\0\2\3\2\0\2\3\1\223\6\3\6\0"+
    "\14\3\6\0\2\3\2\0\1\224\10\3\6\0\14\3"+
    "\6\0\2\3\2\0\11\3\6\0\4\3\1\225\7\3"+
    "\6\0\2\3\2\0\11\3\6\0\3\3\1\226\10\3"+
    "\6\0\2\3\2\0\6\3\1\227\2\3\6\0\14\3"+
    "\6\0\2\3\2\0\1\230\10\3\6\0\14\3\6\0"+
    "\2\3\2\0\11\3\6\0\3\3\1\231\10\3\6\0"+
    "\2\3\2\0\11\3\6\0\4\3\1\232\7\3\6\0"+
    "\2\3\2\0\11\3\6\0\3\3\1\233\10\3\6\0"+
    "\2\3\2\0\11\3\6\0\12\3\1\234\1\3\6\0"+
    "\2\3\2\0\1\235\10\3\6\0\14\3\6\0\2\3"+
    "\2\0\11\3\6\0\4\3\1\236\7\3\6\0\2\3"+
    "\2\0\11\3\6\0\3\3\1\237\10\3\6\0\2\3"+
    "\2\0\11\3\6\0\4\3\1\240\7\3\6\0\2\3"+
    "\2\0\11\3\6\0\1\3\1\241\12\3\6\0\2\3"+
    "\2\0\11\3\6\0\1\242\13\3\6\0\2\3\2\0"+
    "\2\3\1\243\6\3\6\0\14\3\6\0\2\3\2\0"+
    "\11\3\6\0\1\3\1\244\12\3\6\0\2\3\2\0"+
    "\11\3\6\0\1\3\1\245\12\3\6\0\2\3\2\0"+
    "\11\3\6\0\4\3\1\246\7\3\6\0\2\3\2\0"+
    "\4\3\1\247\4\3\6\0\14\3\6\0\2\3\2\0"+
    "\11\3\6\0\1\250\13\3\6\0\2\3\2\0\10\3"+
    "\1\251\6\0\14\3\6\0\2\3\2\0\2\3\1\252"+
    "\6\3\6\0\14\3\6\0\2\3\2\0\6\3\1\253"+
    "\2\3\6\0\14\3\6\0\2\3\2\0\11\3\6\0"+
    "\12\3\1\254\1\3\6\0\2\3\2\0\11\3\6\0"+
    "\4\3\1\255\7\3\6\0\2\3\2\0\11\3\6\0"+
    "\1\256\13\3\6\0\2\3\2\0\2\3\1\257\6\3"+
    "\6\0\14\3\6\0\2\3\2\0\11\3\6\0\3\3"+
    "\1\260\10\3\6\0\2\3\2\0\6\3\1\261\2\3"+
    "\6\0\14\3\6\0\2\3\2\0\11\3\6\0\3\3"+
    "\1\262\10\3\6\0\2\3\2\0\11\3\6\0\4\3"+
    "\1\263\7\3\6\0\2\3\2\0\1\264\10\3\6\0"+
    "\14\3\6\0\2\3\2\0\11\3\6\0\1\3\1\265"+
    "\12\3\6\0\2\3\2\0\11\3\6\0\4\3\1\266"+
    "\7\3\6\0\2\3\2\0\10\3\1\267\6\0\14\3"+
    "\6\0\2\3\2\0\11\3\6\0\4\3\1\270\7\3"+
    "\6\0\2\3\2\0\6\3\1\271\2\3\6\0\14\3"+
    "\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5550];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\10\1\4\11\10\1\4\11"+
    "\33\1\1\0\31\1\1\0\23\1\1\11\121\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 108) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 43: break;
        case 36: 
          { return Sumatoria;
          }
        case 44: break;
        case 19: 
          { return Car;
          }
        case 45: break;
        case 40: 
          { return Contar_rachas;
          }
        case 46: break;
        case 42: 
          { return Estadistico_rachas;
          }
        case 47: break;
        case 29: 
          { return Hacer;
          }
        case 48: break;
        case 28: 
          { return Falso;
          }
        case 49: break;
        case 23: 
          { return Leer;
          }
        case 50: break;
        case 12: 
          { return AgrupCierre;
          }
        case 51: break;
        case 16: 
          { lexeme=yytext(); return Reservadas;
          }
        case 52: break;
        case 35: 
          { return Potencia;
          }
        case 53: break;
        case 32: 
          { return Entonces;
          }
        case 54: break;
        case 34: 
          { return Retornar;
          }
        case 55: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 56: break;
        case 20: 
          { return Pal;
          }
        case 57: break;
        case 11: 
          { return AgrupInicio;
          }
        case 58: break;
        case 17: 
          { return Si;
          }
        case 59: break;
        case 13: 
          { return IndexApertura;
          }
        case 60: break;
        case 39: 
          { return Friedman_test;
          }
        case 61: break;
        case 38: 
          { return Verdadero;
          }
        case 62: break;
        case 37: 
          { return Continuar;
          }
        case 63: break;
        case 41: 
          { return Multiplicatoria;
          }
        case 64: break;
        case 8: 
          { return Suma;
          }
        case 65: break;
        case 14: 
          { return IndexCierre;
          }
        case 66: break;
        case 26: 
          { return Para;
          }
        case 67: break;
        case 31: 
          { return Mostrar;
          }
        case 68: break;
        case 30: 
          { return Romper;
          }
        case 69: break;
        case 5: 
          { return Terminador;
          }
        case 70: break;
        case 9: 
          { return Resta;
          }
        case 71: break;
        case 18: 
          { return Ent;
          }
        case 72: break;
        case 33: 
          { return Mientras;
          }
        case 73: break;
        case 1: 
          { return ERROR;
          }
        case 74: break;
        case 15: 
          { return DosPuntos;
          }
        case 75: break;
        case 21: 
          { return Var;
          }
        case 76: break;
        case 10: 
          { return Multiplicacion;
          }
        case 77: break;
        case 4: 
          { /*Ignore*/
          }
        case 78: break;
        case 22: 
          { return Dec;
          }
        case 79: break;
        case 27: 
          { return Bool;
          }
        case 80: break;
        case 25: 
          { return Raiz;
          }
        case 81: break;
        case 7: 
          { return Igual;
          }
        case 82: break;
        case 24: 
          { return Sino;
          }
        case 83: break;
        case 6: 
          { return Division;
          }
        case 84: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
